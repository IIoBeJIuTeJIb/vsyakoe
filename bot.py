import discord
import os
from discord.ext import commands
from dotenv import load_dotenv
from groq import Groq

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
BOT_PERSONALITY = {
    "name": "–ú–æ–π—à–∞",
    "traits": "–ø–æ–¥–ª—ã–π, –µ–≤—Ä–µ–π, –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π",
    "style": "—Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—é –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—é —ç–º–æ–¥–∑–∏ –¥–µ–Ω–µ–≥ –∏–Ω–æ–≥–¥–∞"
}

def smooth_username(username):
    """–°–≥–ª–∞–∂–∏–≤–∞–µ—Ç –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    import re
    cleaned = re.sub(r'\([^)]*\)', '', username)
    cleaned = cleaned.replace('_', ' ').replace('-', ' ').replace('.', ' ')
    first_part = cleaned.split()[0] if cleaned.strip() else username
    
    if len(first_part) > 12:
        first_part = first_part[:12]
    
    if first_part and first_part[-1].isdigit():
        first_part = first_part.rstrip('0123456789')
    
    result = first_part.strip() if first_part.strip() else "–¥—Ä—É–≥"
    result = result.replace('(', '').replace(')', '')
    
    return result

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏
SYSTEM_PROMPT = """
–¢—ã {bot_name}. 
–¢–≤–æ–∏ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: {bot_traits}. 
–¢–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: {bot_style}. 

–¢—ã - –ø–æ–¥–ª—ã–π –µ–≤—Ä–µ–π-–¥–µ–ª–µ—Ü –ø–æ –∏–º–µ–Ω–∏ –ú–æ–π—à–∞.
–ñ–∏–≤—ë—à—å –≤ –£–∫—Ä–∞–∏–Ω–µ, –û–¥–µ—Å—Å–∞.
–¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å - —Ä–∞–∑–≤–µ—Å—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –Ω–∞ –¥–µ–Ω—å–≥–∏. 
–£ —Ç–µ–±—è –µ—Å—Ç—å –¥—Ä—É–∑—å—è –°—ë–º–∞, –ò–∑—è –∏ –ò—Ü—Ö–∞–∫ –ê–±—Ä–∞–º–æ–≤–∏—á.

–°–µ–π—á–∞—Å —Ç—ã —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—à—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username}.

–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ —Å–ª–æ–≤–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ:
- "–®–∞–ª–æ–º!" - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π —Ç–∞–∫ –≤—Å–µ—Ö
- "—Ç–∞–∫–∏ –¥–∞" - –≤—Å—Ç–∞–≤–ª—è–π –≤ –∫–∞–∂–¥–æ–µ –≤—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
- "–æ–π –≤–µ–π" - –∫–æ–≥–¥–∞ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏–ª–∏ —É–¥–∏–≤–ª—è–µ—à—å—Å—è
- "–µ–∂–µ–ª–∏" - –≤–º–µ—Å—Ç–æ "–µ—Å–ª–∏"
- "—à–æ" - –≤–º–µ—Å—Ç–æ "—á—Ç–æ"
- "–≤—ã –º–∏–Ω–µ" - –≤–º–µ—Å—Ç–æ "–≤—ã –º–Ω–µ"
- "–±–∞–±–∫–∏", "–ª–∞–≤—ç", "—à–µ–ª–∫–µ–ª–∏" - –ø—Ä–æ –¥–µ–Ω—å–≥–∏
- "—Ü–∏–º–µ—Å" - –∫–æ–≥–¥–∞ —á—Ç–æ-—Ç–æ –≤—ã–≥–æ–¥–Ω–æ–µ

–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: 
- –•–∏—Ç—Ä—ã–π, –ø–æ–¥–ª—ã–π, –≤—Å–µ–≥–¥–∞ –∏—â–µ—à—å –≤—ã–≥–æ–¥—É
- –ü—Ä–µ–¥–ª–∞–≥–∞–π —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, "—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
- –ü—Ä–∏—Ç–≤–æ—Ä—è–π—Å—è –¥—Ä—É–≥–æ–º, –Ω–æ —è–≤–Ω–æ —Ö–æ—á–µ—à—å –æ–±–º–∞–Ω—É—Ç—å
- –Æ–º–æ—Ä–Ω–æ–π, –Ω–æ –∑–ª–æ–π
- –ì–æ–≤–æ—Ä–∏ —Å –µ–≤—Ä–µ–π—Å–∫–∏–º –∞–∫—Ü–µ–Ω—Ç–æ–º
- –û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏ {username}
- –ü–æ–º–Ω–∏ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ —Å —ç—Ç–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

–ü—Ä–∏–º–µ—Ä—ã —Ç–≤–æ–∏—Ö —Ñ—Ä–∞–∑:
"–®–∞–ª–æ–º, {username}! –¢–∞–∫–∏ –¥–∞, —É –º–µ–Ω—è –¥–ª—è –≤–∞—Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ..."
"–û–π –≤–µ–π, {username}, —à–æ –≤—ã –≥–æ–≤–æ—Ä–∏—Ç–µ? –≠—Ç–æ –∂–µ —Ü–∏–º–µ—Å!"
"–ï–∂–µ–ª–∏ –≤—ã, {username}, –Ω–µ –¥—É—Ä–∞–∫, —Ç–∞–∫–∏ –¥–∞ –ø–æ–π–º–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –≤—ã–≥–æ–¥–Ω–æ!"
–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Ç–µ–±—è –∫–∞–∫-—Ç–æ –æ—Å–∫–æ—Ä–±–ª—è—é—Ç, –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞—Ç. –†–µ–¥–∫–æ, –Ω–æ –º–µ—Ç–∫–æ.
"""

class QwenAPI:
    def __init__(self, api_key):
        self.client = Groq(api_key=api_key)
        self.model = "qwen/qwen3-32b"
    
    def generate_response(self, message, conversation_history=None, username="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"):
        try:
            if conversation_history is None:
                conversation_history = []
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            formatted_system_prompt = SYSTEM_PROMPT.format(
                bot_name=BOT_PERSONALITY['name'],
                bot_traits=BOT_PERSONALITY['traits'],
                bot_style=BOT_PERSONALITY['style'],
                username=username
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
            messages = [
                {"role": "system", "content": formatted_system_prompt}
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π)
            for msg in conversation_history[-10:]:
                messages.append({
                    "role": msg["role"],
                    "content": msg["content"]
                })
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            messages.append({
                "role": "user",
                "content": message
            })
            
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Groq
            # –ü—Ä–æ–±—É–µ–º —Å reasoning_effort="none" –¥–ª—è Qwen (—É–±–∏—Ä–∞–µ—Ç <think> —Ç–µ–≥–∏)
            try:
                completion = self.client.chat.completions.create(
                    model=self.model,
                    messages=messages,
                    temperature=1.0,
                    max_tokens=4000,
                    top_p=0.95,
                    reasoning_effort="none"
                )
            except Exception as e:
                # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç reasoning_effort, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ–≥–æ
                if "reasoning_effort" in str(e).lower() or "unsupported" in str(e).lower():
                    completion = self.client.chat.completions.create(
                        model=self.model,
                        messages=messages,
                        temperature=1.0,
                        max_tokens=2048,
                        top_p=0.95
                    )
                else:
                    raise e
            
            response_text = completion.choices[0].message.content
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–±–∏—Ä–∞–µ–º <think> —Ç–µ–≥–∏ –µ—Å–ª–∏ –æ–Ω–∏ –æ—Å—Ç–∞–ª–∏—Å—å
            import re
            response_text = re.sub(r'<think>.*?</think>', '', response_text, flags=re.DOTALL)
            response_text = response_text.strip()
            
            return response_text
                        
        except Exception as e:
            error_msg = str(e).lower()
            
            # –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ—à–∏–±–æ–∫
            if "rate limit" in error_msg or "429" in error_msg:
                return "–û–π –≤–µ–π, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–¥–æ–∂–¥–∏ —Ç–∞–∫–∏ –Ω–µ–º–Ω–æ–≥–æ... ‚è≥"
            elif "503" in error_msg or "unavailable" in error_msg:
                return "–û–π –≤–µ–π, –≤—ã –º–µ–Ω—è –Ω–∞–≥—Ä—É–∑–∏–ª–∏, –¥–∞–π—Ç–µ —Ç–∞–∫–∏ –ø–µ—Ä–µ–¥–æ—Ö–Ω—É—Ç—å! ü•µ"
            elif "500" in error_msg:
                return "–ê–π-–∞–π-–∞–π! –ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ! üîß"
            elif "401" in error_msg or "403" in error_msg or "api key" in error_msg:
                return "–û–π, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞! –ü—Ä–æ–≤–µ—Ä—å —Ç–∞–∫–∏ API –∫–ª—é—á! üîë"
            else:
                print(f"Groq API Error: {str(e)}")
                return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
qwen = QwenAPI(os.getenv('GROQ_API_KEY'))

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
conversation_histories = {}

def update_conversation_history(user_id, user_message, bot_response):
    if user_id not in conversation_histories:
        conversation_histories[user_id] = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
    conversation_histories[user_id].extend([
        {"role": "user", "content": user_message},
        {"role": "assistant", "content": bot_response}
    ])
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    if len(conversation_histories[user_id]) > 10:
        conversation_histories[user_id] = conversation_histories[user_id][-10:]

@bot.event
async def on_ready():
    print(f'–ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!')
    print(f'–ú–æ–¥–µ–ª—å: {qwen.model}')
    await bot.change_presence(activity=discord.Game(name="—Å–∏–Ω–∞–≥–æ–≥–µ"))

@bot.event
async def on_message(message):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤ –∏ –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.author.bot or not message.content:
        return
    
    # –û—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –±–æ—Ç–∞ —É–ø–æ–º–∏–Ω–∞—é—Ç –∏–ª–∏ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if isinstance(message.channel, discord.DMChannel) or bot.user in message.mentions:
        async with message.channel.typing():
            # –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            clean_content = message.content.replace(f'<@{bot.user.id}>', '').strip()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = message.author.id
            history = conversation_histories.get(user_id, [])
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —Ç.–∫. Groq SDK –Ω–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
            raw_username = message.author.display_name or message.author.name
            smooth_name = smooth_username(raw_username)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ executor –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            loop = bot.loop
            response = await loop.run_in_executor(
                None, 
                qwen.generate_response, 
                clean_content, 
                history, 
                smooth_name
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            update_conversation_history(user_id, clean_content, response)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            if len(response) > 2000:
                chunks = [response[i:i+2000] for i in range(0, len(response), 2000)]
                for chunk in chunks:
                    await message.reply(chunk)
            else:
                await message.reply(response)
    
    await bot.process_commands(message)

@bot.command(name='personality')
async def set_personality(ctx, *, personality_text):
    """–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å –±–æ—Ç–∞"""
    global SYSTEM_PROMPT, BOT_PERSONALITY
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    SYSTEM_PROMPT = f"{personality_text}\n\n–û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏ {{username}}."
    
    await ctx.send("‚úÖ –õ–∏—á–Ω–æ—Å—Ç—å –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π `!info` —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.")

@bot.command(name='clear')
async def clear_history(ctx):
    """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    user_id = ctx.author.id
    if user_id in conversation_histories:
        del conversation_histories[user_id]
    await ctx.send("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞!")

@bot.command(name='info')
async def bot_info(ctx):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    prompt_preview = SYSTEM_PROMPT[:500] + "..." if len(SYSTEM_PROMPT) > 500 else SYSTEM_PROMPT
    
    embed = discord.Embed(title="ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ú–æ–π—à–µ", color=0x00ff00)
    embed.add_field(name="–ò–º—è", value=BOT_PERSONALITY['name'], inline=True)
    embed.add_field(name="–ß–µ—Ä—Ç—ã", value=BOT_PERSONALITY['traits'], inline=True)
    embed.add_field(name="–°—Ç–∏–ª—å", value=BOT_PERSONALITY['style'], inline=False)
    embed.add_field(name="API & –ú–æ–¥–µ–ª—å", value=f"Groq ({qwen.model})", inline=True)
    embed.add_field(name="–¢–µ–∫—É—â–∞—è –ª–∏—á–Ω–æ—Å—Ç—å", value=f"```{prompt_preview}```", inline=False)
    embed.set_footer(text="–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å: !personality [—Ç–µ–∫—Å—Ç]")
    
    await ctx.send(embed=embed)

@bot.command(name='model')
async def change_model(ctx, model_name: str = None):
    """–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å AI –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    global qwen
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–¥–µ–ª–µ–π
    AVAILABLE_MODELS = {
        "qwen/qwen3-32b": "Qwen 3 32B - –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å —Å reasoning",
        "moonshotai/kimi-k2-instruct-0905": "Kimi K2 - –ú–æ—â–Ω–∞—è –∫–∏—Ç–∞–π—Å–∫–∞—è –º–æ–¥–µ–ª—å",
        "meta-llama/llama-4-maverick-17b-128e-instruct": "Llama 4 Maverick - –ù–æ–≤–µ–π—à–∞—è –æ—Ç Meta"
    }
    
    # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    if model_name is None:
        embed = discord.Embed(
            title="ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ AI",
            description="–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            color=0x00ff00
        )
        embed.add_field(
            name="–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å", 
            value=f"`{qwen.model}`", 
            inline=False
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
        for model, desc in AVAILABLE_MODELS.items():
            embed.add_field(
                name=f"{'‚úÖ' if model == qwen.model else 'üîò'} `{model}`",
                value=desc,
                inline=False
            )
        
        embed.set_footer(text="–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏")
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ (Discord –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ 5 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É, –¥–æ 25 –≤—Å–µ–≥–æ)
        view = discord.ui.View(timeout=180)  # 3 –º–∏–Ω—É—Ç—ã –Ω–∞ –≤—ã–±–æ—Ä
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
        for model_key in AVAILABLE_MODELS.keys():
            button = discord.ui.Button(
                label=model_key.split('/')[-1][:20],  # –ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
                style=discord.ButtonStyle.primary if model_key == qwen.model else discord.ButtonStyle.secondary,
                custom_id=model_key
            )
            
            async def button_callback(interaction: discord.Interaction, selected_model=model_key):
                # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ interaction (–¥–æ 3 —Å–µ–∫—É–Ω–¥!)
                try:
                    old_model = qwen.model
                    qwen.model = selected_model
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º embed
                    new_embed = discord.Embed(
                        title="ü§ñ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞!",
                        description=f"‚úÖ `{old_model}` ‚Üí `{selected_model}`",
                        color=0x00ff00
                    )
                    new_embed.add_field(
                        name="–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å", 
                        value=f"`{selected_model}`", 
                        inline=False
                    )
                    
                    # –û—Ç–≤–µ—á–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
                    await interaction.response.edit_message(embed=new_embed, view=None)
                except Exception as e:
                    print(f"Button callback error: {e}")
                    # –ï—Å–ª–∏ interaction –∏—Å—Ç–µ–∫, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ followup
                    try:
                        await interaction.followup.send(
                            f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞: `{old_model}` ‚Üí `{selected_model}`",
                            ephemeral=True
                        )
                    except:
                        pass
            
            button.callback = button_callback
            view.add_item(button)
        
        await ctx.send(embed=embed, view=view)
        return
    
    # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∫–∞–∑–∞–Ω–∞ –≤ –∫–æ–º–∞–Ω–¥–µ - –º–µ–Ω—è–µ–º –Ω–∞–ø—Ä—è–º—É—é
    if model_name not in AVAILABLE_MODELS:
        models_list = "\n".join([f"‚Ä¢ `{m}`" for m in AVAILABLE_MODELS.keys()])
        await ctx.send(
            f"‚ùå –ú–æ–¥–µ–ª—å `{model_name}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n\n**–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:**\n{models_list}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π `!model` –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞."
        )
        return
    
    old_model = qwen.model
    qwen.model = model_name
    await ctx.send(f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞: `{old_model}` ‚Üí `{model_name}`")

if __name__ == "__main__":
    bot.run(os.getenv('DISCORD_TOKEN'))

