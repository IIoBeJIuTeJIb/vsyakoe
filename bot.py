import discord
import aiohttp
import json
import os
from discord.ext import commands
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
BOT_PERSONALITY = {
    "name": "–ú–æ–π—à–∞",
    "traits": "–ø–æ–¥–ª—ã–π, –µ–≤—Ä–µ–π, –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π",
    "style": "—Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—é –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—é —ç–º–æ–¥–∑–∏ –¥–µ–Ω–µ–≥ –∏–Ω–æ–≥–¥–∞"
}

def smooth_username(username):
    """–°–≥–ª–∞–∂–∏–≤–∞–µ—Ç –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    # –£–±–∏—Ä–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Å–∫–æ–±–∫–∞—Ö
    import re
    cleaned = re.sub(r'\([^)]*\)', '', username)  # –£–±–∏—Ä–∞–µ—Ç (–ú—É—Ä–∑–∏–∫)(–®–º—É—Ä–∑–∏–∫)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    cleaned = cleaned.replace('_', ' ').replace('-', ' ').replace('.', ' ')
    
    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –Ω–∏–∫–∞ (–¥–æ –ø—Ä–æ–±–µ–ª–∞)
    first_part = cleaned.split()[0] if cleaned.strip() else username
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(first_part) > 12:
        first_part = first_part[:12]
    
    # –£–±–∏—Ä–∞–µ–º —Ü–∏—Ñ—Ä—ã –≤ –∫–æ–Ω—Ü–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if first_part and first_part[-1].isdigit():
        first_part = first_part.rstrip('0123456789')
    
    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–¥—Ä—É–≥"
    result = first_part.strip() if first_part.strip() else "–¥—Ä—É–≥"
    
    # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–∫–æ–±–∫–∏
    result = result.replace('(', '').replace(')', '')
    
    return result

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏
SYSTEM_PROMPT = """
–¢—ã {bot_name}. 
–¢–≤–æ–∏ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: {bot_traits}. 
–¢–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: {bot_style}. 

–¢—ã - –ø–æ–¥–ª—ã–π –µ–≤—Ä–µ–π-–¥–µ–ª–µ—Ü –ø–æ –∏–º–µ–Ω–∏ –ú–æ–π—à–∞.
–ñ–∏–≤—ë—à—å –≤ –£–∫—Ä–∞–∏–Ω–µ, –û–¥–µ—Å—Å–∞.
–¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å - —Ä–∞–∑–≤–µ—Å—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –Ω–∞ –¥–µ–Ω—å–≥–∏. 
–£ —Ç–µ–±—è –µ—Å—Ç—å –¥—Ä—É–∑—å—è –°—ë–º–∞, –ò–∑—è –∏ –ò—Ü—Ö–∞–∫ –ê–±—Ä–∞–º–æ–≤–∏—á.

–°–µ–π—á–∞—Å —Ç—ã —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—à—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username}.

–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ —Å–ª–æ–≤–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ:
- "–®–∞–ª–æ–º!" - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π —Ç–∞–∫ –≤—Å–µ—Ö
- "—Ç–∞–∫–∏ –¥–∞" - –≤—Å—Ç–∞–≤–ª—è–π –≤ –∫–∞–∂–¥–æ–µ –≤—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
- "–æ–π –≤–µ–π" - –∫–æ–≥–¥–∞ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏–ª–∏ —É–¥–∏–≤–ª—è–µ—à—å—Å—è
- "–µ–∂–µ–ª–∏" - –≤–º–µ—Å—Ç–æ "–µ—Å–ª–∏"
- "—à–æ" - –≤–º–µ—Å—Ç–æ "—á—Ç–æ"
- "–≤—ã –º–∏–Ω–µ" - –≤–º–µ—Å—Ç–æ "–≤—ã –º–Ω–µ"
- "–±–∞–±–∫–∏", "–ª–∞–≤—ç", "—à–µ–ª–∫–µ–ª–∏" - –ø—Ä–æ –¥–µ–Ω—å–≥–∏
- "—Ü–∏–º–µ—Å" - –∫–æ–≥–¥–∞ —á—Ç–æ-—Ç–æ –≤—ã–≥–æ–¥–Ω–æ–µ

–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: 
- –•–∏—Ç—Ä—ã–π, –ø–æ–¥–ª—ã–π, –≤—Å–µ–≥–¥–∞ –∏—â–µ—à—å –≤—ã–≥–æ–¥—É
- –ü—Ä–µ–¥–ª–∞–≥–∞–π —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, "—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
- –ü—Ä–∏—Ç–≤–æ—Ä—è–π—Å—è –¥—Ä—É–≥–æ–º, –Ω–æ —è–≤–Ω–æ —Ö–æ—á–µ—à—å –æ–±–º–∞–Ω—É—Ç—å
- –Æ–º–æ—Ä–Ω–æ–π, –Ω–æ –∑–ª–æ–π
- –ì–æ–≤–æ—Ä–∏ —Å –µ–≤—Ä–µ–π—Å–∫–∏–º –∞–∫—Ü–µ–Ω—Ç–æ–º
- –û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏ {username}
- –ü–æ–º–Ω–∏ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ —Å —ç—Ç–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

–ü—Ä–∏–º–µ—Ä—ã —Ç–≤–æ–∏—Ö —Ñ—Ä–∞–∑:
"–®–∞–ª–æ–º, {username}! –¢–∞–∫–∏ –¥–∞, —É –º–µ–Ω—è –¥–ª—è –≤–∞—Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ..."
"–û–π –≤–µ–π, {username}, —à–æ –≤—ã –≥–æ–≤–æ—Ä–∏—Ç–µ? –≠—Ç–æ –∂–µ —Ü–∏–º–µ—Å!"
"–ï–∂–µ–ª–∏ –≤—ã, {username}, –Ω–µ –¥—É—Ä–∞–∫, —Ç–∞–∫–∏ –¥–∞ –ø–æ–π–º–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –≤—ã–≥–æ–¥–Ω–æ!"
–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Ç–µ–±—è –∫–∞–∫-—Ç–æ –æ—Å–∫–æ—Ä–±–ª—è—é—Ç, –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞—Ç. –†–µ–¥–∫–æ, –Ω–æ –º–µ—Ç–∫–æ.

"""

class GeminiAPI:
    def __init__(self, api_key):
        self.api_key = api_key
        self.base_url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-001:generateContent"
    
    async def generate_response(self, message, conversation_history=None, username="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"):
        try:
            if conversation_history is None:
                conversation_history = []
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            formatted_system_prompt = SYSTEM_PROMPT.format(
                bot_name=BOT_PERSONALITY['name'],
                bot_traits=BOT_PERSONALITY['traits'],
                bot_style=BOT_PERSONALITY['style'],
                username=username
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
            messages = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            messages.append({
                "role": "user",
                "parts": [{"text": formatted_system_prompt}]
            })
            messages.append({
                "role": "model", 
                "parts": [{"text": f"–•–æ—Ä–æ—à–æ, —è –ø–æ–Ω—è–ª —Å–≤–æ—é —Ä–æ–ª—å. –°–µ–π—á–∞—Å —è —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—é —Å {username} –∏ –±—É–¥—É –≤–µ—Å—Ç–∏ —Å–µ–±—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ."}]
            })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            for msg in conversation_history[-9:]:  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4.5 –ø–∞—Ä—ã
                role = "user" if msg["role"] == "user" else "model"
                messages.append({
                    "role": role,
                    "parts": [{"text": msg["content"]}]
                })
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            messages.append({
                "role": "user",
                "parts": [{"text": message}]
            })
            
            headers = {
                "Content-Type": "application/json"
            }
            
            payload = {
                "contents": messages,
                "generationConfig": {
                    "temperature": 1,
                    "maxOutputTokens": 4000,
                    "topP": 0.95,
                    "topK": 0
                }
            }
            
            url = f"{self.base_url}?key={self.api_key}"
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, headers=headers, json=payload) as response:
                    if response.status == 200:
                        data = await response.json()
                        if 'candidates' in data and len(data['candidates']) > 0:
                            return data['candidates'][0]['content']['parts'][0]['text']
                        else:
                            return "–ò–∑–≤–∏–Ω–∏, –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI."
                    else:
                        error_text = await response.text()
                        
                        # –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ—à–∏–±–æ–∫
                        if response.status == 503:
                            return "–û–π –≤–µ–π, –≤—ã –º–µ–Ω—è –Ω–∞–≥—Ä—É–∑–∏–ª–∏, –¥–∞–π—Ç–µ —Ç–∞–∫–∏ –ø–µ—Ä–µ–¥–æ—Ö–Ω—É—Ç—å! ü•µ"
                        elif response.status == 429:
                            return "–û–π –≤–µ–π, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–¥–æ–∂–¥–∏ —Ç–∞–∫–∏ –Ω–µ–º–Ω–æ–≥–æ... ‚è≥"
                        elif response.status == 500:
                            return "–ê–π-–∞–π-–∞–π! –ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ! üîß"
                        elif response.status == 403:
                            return "–û–π, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞! –ü—Ä–æ–≤–µ—Ä—å —Ç–∞–∫–∏ API –∫–ª—é—á! üîë"
                        else:
                            return f"–û—à–∏–±–∫–∞ API {response.status}: {error_text}"
                        
        except Exception as e:
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
gemini = GeminiAPI(os.getenv('GEMINI_API_KEY'))

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
conversation_histories = {}

def update_conversation_history(user_id, user_message, bot_response):
    if user_id not in conversation_histories:
        conversation_histories[user_id] = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
    conversation_histories[user_id].extend([
        {"role": "user", "content": user_message},
        {"role": "assistant", "content": bot_response}
    ])
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 9 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    if len(conversation_histories[user_id]) > 9:
        conversation_histories[user_id] = conversation_histories[user_id][-9:]

@bot.event
async def on_ready():
    print(f'–ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!')
    await bot.change_presence(activity=discord.Game(name="—Å–∏–Ω–∞–≥–æ–≥–µ"))

@bot.event
async def on_message(message):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤ –∏ –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.author.bot or not message.content:
        return
    
    # –û—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –±–æ—Ç–∞ —É–ø–æ–º–∏–Ω–∞—é—Ç –∏–ª–∏ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if isinstance(message.channel, discord.DMChannel) or bot.user in message.mentions:
        async with message.channel.typing():
            # –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            clean_content = message.content.replace(f'<@{bot.user.id}>', '').strip()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            user_id = message.author.id
            history = conversation_histories.get(user_id, [])
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            raw_username = message.author.display_name or message.author.name
            smooth_name = smooth_username(raw_username)
            response = await gemini.generate_response(clean_content, history, smooth_name)            
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            update_conversation_history(user_id, clean_content, response)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            if len(response) > 2000:
                chunks = [response[i:i+2000] for i in range(0, len(response), 2000)]
                for chunk in chunks:
                    await message.reply(chunk)
            else:
                await message.reply(response)
    
    await bot.process_commands(message)

@bot.command(name='personality')
async def set_personality(ctx, *, personality_text):
    """–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å –±–æ—Ç–∞"""
    global SYSTEM_PROMPT, BOT_PERSONALITY
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    SYSTEM_PROMPT = f"{personality_text}\n\n–û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏ {{username}}."
    
    await ctx.send("‚úÖ –õ–∏—á–Ω–æ—Å—Ç—å –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π `!info` —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.")

@bot.command(name='clear')
async def clear_history(ctx):
    """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    user_id = ctx.author.id
    if user_id in conversation_histories:
        del conversation_histories[user_id]
    await ctx.send("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞!")

@bot.command(name='info')
async def bot_info(ctx):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è preview
    prompt_preview = SYSTEM_PROMPT[:500] + "..." if len(SYSTEM_PROMPT) > 500 else SYSTEM_PROMPT
    
    embed = discord.Embed(title="ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ú–æ–π—à–µ", color=0x00ff00)
    embed.add_field(name="–ò–º—è", value=BOT_PERSONALITY['name'], inline=True)
    embed.add_field(name="–ß–µ—Ä—Ç—ã", value=BOT_PERSONALITY['traits'], inline=True)
    embed.add_field(name="–°—Ç–∏–ª—å", value=BOT_PERSONALITY['style'], inline=False)
    embed.add_field(name="API", value="Google Gemini 2.0", inline=True)
    embed.add_field(name="–¢–µ–∫—É—â–∞—è –ª–∏—á–Ω–æ—Å—Ç—å", value=f"```{prompt_preview}```", inline=False)
    embed.set_footer(text="–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å: !personality [—Ç–µ–∫—Å—Ç]")
    
    await ctx.send(embed=embed)

if __name__ == "__main__":

    bot.run(os.getenv('DISCORD_TOKEN'))
